需要转义的字符: $^().*+?\|[{ 
	-- 注意 : 不包括 ]  -  }
	] - 位于一个没有转义的 [ 之后才是元字符 , 
	} 位于一个没有转义的 { 之后才是元字符 .  
	java6+ : \Q .... \E  , <\Q>会抑制之后的所有元字符的含义, 直到出现 <\E>
	
不区分大小写 :
	java : <(?i)regex(?-i)> 在正则中开启和关闭 不区分大小写
	
匹配不可打印字符 :
	\r(回车)\n
	\x1B  --一个\x 后 + 两个 大写16进制数 : 匹配 ASCII字符集中的一个数 
	
匹配多个字符之一 : 			! 注意是字符 , 不是字符串 
	非16进制字符集 : [^A-Fa-f\d]
	java 里 的取并集 : 
		\p{InThai}  :匹配泰语区块的任意字符 
		\P{N}  : 匹配不拥有Number 属性的任意字符 
		那么 
		[[\p{InThai}]&&[\P{N}]]  : 匹配泰语数字字符 
		
匹配任意字符 :
	java : .        -- 需要先开启 .匹配换行符模式 : (?m)
	-- javascript 中  . 不匹配 换行符
	JavaScript : [\s\S]
@	
匹配文本行起始,目标文本起始  / 文本行结尾,文本结尾 
	文本行起始  , 结束 
		java & JavaScript: ^$
	目标文本起始 ,结束 
		java :
					\A 匹配目标文本开始 
					\Z 匹配目标文本结束  
					// 都会忽略前导 和 末尾 的换行符
	JavaScript: 
		@@@@@@@@@@@@@@@@@@
		
匹配整个单词
	\b  :单词边界 , word boundary , 他会匹配一个单词的开始或结束 , 是个定位符 
		匹配完整的单词: \bcat\b
	\B  :非边界单词 
		匹配不完整的单词: \Bcat|cat\B
		
Unicode 属性/类别/区块
	java : \p{Sc}  // 可以取到某语言.. 
	[\u4E00-\u9FA5\uf900-\ufa2d]可以用来匹配中文 
	