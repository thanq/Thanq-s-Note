EXT : FromPanel & table 

grid 中 内容的加载: 

数据格式 : json , 

// 用来定义表格中要显示的数据  // 这是个二维数组 
var data=[ [1, 'EasyJWeb', 'EasyJF','www.easyjf.com'],[2, 'jfox', 'huihoo','www.huihoo.org']];


//Stroe 负责把 各种各样的数据  转换成 ExtJs 的数据记录集 :Record
var store=new Ext.data.SimpleStore({data:data,fields:["id","name","homepage"]});



//colums 是一个对象数组, 每一个对象描述表格中的一列信息 , // 描述表格包含的列
//对象属性:header:位于第一行的列名; dataIndex:列对应的记录集字段; sorable:是否可以排序; renderer:列的渲染函数; width:列的初始宽度; format: 格式化信息 ; 
//简写是 cm ;
var colM=new Ext.grid.ColumnModel([{header:"项目名称",dataIndex:"name"},{header:"网址",dataIndex:"homepage"}]);

//创建一个表格
var grid = new Ext.grid.GridPanel({
	renderTo:"hello",
	title:"中国Java开源产品及团队",
	height:150,
	width:600,
	cm:colM,
	store:store,
	autoExpandColumn:2// 自动扩展的列
});



ComboBox :  mode : remote  远程 (default)// 当第一次触发时自动 载入 store,   local : 本地



Record : 表格控件中使用的数据是存储在 Record 对象中, 一个Record 可以理解为关系数据库中表格的一行,
可以称为记录 , Record 对象中包含了记录的定义信息, (该记录包含了那些字段,每个字段的数据类型
同时包含了记录具体的数据信息(各个字段的值) )


var MyRecord = Ext.data.Record.create([//创建了一个 Record ; 
//定义了一下字段, [name, mapping , type]
{name: 'title'},// name ://  Record对象所引用的字段名称
{name: 'username', mapping: 'author'},
//mapping //如果映射名与字段名都是相同的，那么映射名可以省略.
{name: 'loginTimes', type: 'int'},
{name: 'lastLoginTime', mapping: 'loginTime', type: 'date'} // type: 用来指定类型
]);
var r=new MyRecord({
title:"日志标题",
username:"easyjf",
loginTimes:100,
loginTime:new Date()
});

alert(MyRecord.getField("username").mapping);// 根据name 属性 来 得到 {} . mapping 
alert(MyRecord.getField("lastLoginTime").type);//得到 记录中 Last..  的相关信息{}//
alert(r.data.username);//就是 usernam 的值 // data  是数据的存储区 //
alert(r.get("loginTime"));// 可以使用 get("属性值来得到 k-V ")// 同上, 得到记录中 login.. 字段的值

// 首先使用 Record 的 create 方法创建一个 记录集  eg: MyRecord,

r.set("name","value") // 设置记录中指定字段的值 , r.dirty : 得到当前字段的值是否有被更改过


Store : 可以理解为数据存储器: 即提供缓存的表: 通过它可以得到需要展现的数据,  一个Store 包含多个Record , 
同时Store又 包含了数据来源, 数据的解析器 等相关信息, Store 通过调研具体的数据解析器(DataReader)
来解析指定类型/格式 的数据(DataProxy) , 并转换成记录集的形式保存在Store 中, 作为其它控件的输入 : 

	一个完整的数据存储器要知道数据源(DataProxy: 由proxy 配置属性定义) ; 
	数据解析方式(DataReader :由DataReader 配置属性定义) 才能工作,
	
	
	var MyRecord = Ext.Record.create([{name:"title"}]);
	var dataProxy = new Ext.data.HttpProxy({url:"like.jsp"});//用来得到json
	var theReader = new Ext.data.JsonRader({
		totalProperty:"results",
		root:"rows",
		id:"id"
	},MyRecord);// 用来解析json
	var stroe = new Ext.data.Store({proxy:dataProxy,reader:theReader});
	
	//简化:
	
	var store = new Ext.data.JsonStore({
		url:"xxx.do",
		totalProperty:"results",
		root:"rows",
		fields:["title",{name:"userName",mapping:"author"}]
	});
	
	JsonReader: Ext.data.JsonReader : 将json -> Record 
	
	var MyREcord = Ext.data.Record.create([{name:"title"},{name:"username",mapping:"author"},{name:"loginTimes",type:"int"}]);
	var myReader = new Ext.data.JsonReader({
		totalProperty:"results",
		root:"rows",
		id:"id"
	},MyRecord);
	// new Ext.data.JsonReader() // 可以直接用
	// 可以解析下面的json :
	{"results":2,"rows":[{id:1,title:"test",author:"xiaoWang",loginTime:3},
						{id:1,title:"test",author:"xiaoWang",loginTime:3}]}
	
	还可以使用将 Store 中的 记录集的配置信息保存在json 中: 
	
	DataProxy:// 数据代理, 数据源, 即如何得到供给 DataReader 解析的数据
	
		Ext.data.MemoryProxy 
		Ext.data.HttpProxy
		Ext.data.ScriptTagProxy //
		
	
	
	
	
	
	
	
	
	
	





