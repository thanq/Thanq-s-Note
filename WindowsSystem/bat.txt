rem 在bat执行时 console 关闭命令的回显 的方式 : 1  前面加@ 标识 , 2 执行echo off
@echo off 

rem 暂停 并提示 键盘操作后继续 
pause 

rem goto : 跳转
@echo off 
rem 定义个位置 , 可以用goto跳转到这里  注意定义的形式: ":lable \n"
:lable
echo 123 
pause
goto lable


rem call 可以在一个批处理 bat1中 调用另一个批处理 bat2 , 等bat2执行完后 , 继续bat1的执行
call test.bat

dir t:
rem 返回值为1 代表失败 if 语句的格式: if [not] errorlevel..|str1==str2<!字符串绝对比较>|exist file comm
if errorlevel 1 goto 1 
rem 返回值为0 代表成功
if errorlevel 0 goto 0
:1
echo 失败 ! 
goto exit
:0
echo success ! 
goto exit
:exit 
echo exit 2.bat 

rem  >  : 传递并覆盖  , 下面会将 dir 的 结果  输出到 1.txt 中 覆盖掉原来的内容
dir *.txt >1.txt 
rem  >>  : 追加  , 下面会将 dir 的 结果  追加到 1.txt 中 ,  不覆盖掉原来的内容
dir *.txt >>1.txt 

rem |  : 管道命令 , 将上一个的执行结果传到下一个命令去执行 ; 得到dir的结果 , 在结果中 find"txt"
dir c:\ | find "txt"
rem 可以在格式化操作中免去输入 y 的操作 
echo y|format a: /s /q /v:system

rem ^ : 针对 > , <  , &  的转义字符  , 将他们当成普通字符 , 而不是命令
echo test>test
echo test^>test 

rem & : 这个允许在一行里执行多条命令, 即使前一条失败了 ,也不会影响下一条的运行
rem && : 上一条失败了 , 下一条将不会运行
dir a: && dir c:
dir a: & dir c:

rem 某些情况下 , ',' 可以当做' '来用
dir,d:S

rem ';' 当命令相同时使用  dir c:;d:  等同于 dir c: & dir d: 


rem for 
for parameter   %i  in ( set<!-- 相关文件/comm -->) do Comm
<!-- parameter in ( /d )-->
<!-- i 为字母 , 区分大小写-->

/d : 只为目录 : 对 set中所有目录 执行相应的命令 Comm 
for /d %i in (*a*?) do @echo %i  // 注意 , %i 在 bat 中 得写为 %%i  
for /d %i in (???) do @echo %i 

/r : 递归 , 进入根目录树 , 如果没有指定根目录 , 则认为是当前目录 在树的每个目录中执行 for 语句
	如果 Set 只是一个句点 (.)，则只枚举目录树 
for /r d:\ %%i in (*.exe) do @echo %%i

/l : 迭代数值范围
for /L %% Variable in (Start#,Step#,End#) do Command
(1,1,5) 生成序列 1 2 3 4 5，而 (5,-1,1) 则生成序列 (5 4 3 2 1)
for /l %%i in (1,1,5) do start cmd
for /l %%i in (1,1,5) do md %%i

/f : 迭代及文件解析 ; 使用文件解析来处理 命令输出 字符串 文件内容 
for /F "ParsingKeywords" %% Variable in (FileNameSet) do Command
ParsingKeywords 
eol=c           - 指一个行注释字符的结尾(就一个)
skip=n          - 指在文件开始时忽略的行数。
delims=xxx      - 指分隔符集。这个替换了空格和跳格键的
                   默认分隔符集。
tokens=x,y,m-n  - 指每行的哪一个符号被传递到每个迭代
                   的 for 本身。这会导致额外变量名称的分配。m-n
                   格式为一个范围。通过 nth 符号指定 mth。如果
                   符号字符串中的最后一个字符星号，
                   那么额外的变量将在最后一个符号解析之后
                   分配并接受行的保留文本。
usebackq        - 指定新语法已在下类情况中使用:
                   在作为命令执行一个后引号的字符串并且一个单
                   引号字符为文字字符串命令并允许在 filenameset
                   中使用双引号扩起文件名称。

rem  注释字符; 将忽略掉以 ';' 开头的行  ; 每行分隔后的第一列会返回  ; 分隔符为 '' 打印以空格为
FOR /F "eol=; tokens=1 delims= " %%i in (test.txt) do @echo %%i
FOR /F "eol=; tokens=1 delims=_" %%i in (test.txt) do @echo %%i

"delims=" 可以整行输出
FOR /F "delims=" %%i in ('net user') do @echo %%i 
输出 net user 命令的执行结果 括号的内容用 单引号 引起来 就表示是要返回命令的结果

start commend : 在新的cmd window 中 执行命令


for 命令中的变量

%~I 将 去掉引号 , 
1、若字符串首尾同时存在引号，则删除首尾的引号；
2、若字符串尾不存在引号，则删除字符串首的引号；
3、如果字符串中间存在引号，或者只在尾部存在引号，则不删除。
FOR /F "delims==" %%i IN (test.txt) DO @echo  %%~i

%~fI 将 %I 扩展为一个完全合格的路径名
FOR /F "delims==" %%i IN ('dir /b') DO @echo  %%~fi

%~dI        - 仅将 %I 扩展到一个驱动器号
FOR /F "delims==" %%i IN ('dir /b') DO @echo  %%~di
C:
C:

%~pI        - 仅将 %I 扩展到一个路径
这个用法和上面一样,他只打印路径不打印文件名字
FOR /F "delims==" %%i IN ('dir /b') DO @echo  %%~pi

%~nI        - 仅将 %I 扩展到一个文件名
只打印文件名字
FOR /F "delims==" %%i IN ('dir /b') DO @echo  %%~ni

%~xI        - 仅将 %I 扩展到一个文件扩展名
只打印文件的扩展名
FOR /F "delims==" %%i IN ('dir /b') DO @echo  %%~xi

%~sI        - 扩展的路径只含有短名
打印绝对短文件名 即目录和文件名都采用缩写格式
FOR /F "delims==" %%i IN ('dir /b') DO @echo  %%~si

%~aI        - 将 %I 扩展到文件的文件属性
打印文件的属性
FOR /F "delims==" %%i IN ('dir /b') DO @echo  %%~ai

%~tI        - 将 %I 扩展到文件的日期/时间
打印文件建立的日期
FOR /F "delims==" %%i IN ('dir /b') DO @echo  %%~ti

%~zI        - 将 %I 扩展到文件的大小
打印文件的大小
FOR /F "delims==" %%i IN ('dir /b') DO @echo  %%~zi

系统变量:
%ALLUSERSPROFILE% 本地 返回“所有用户”配置文件的位置。 
%APPDATA% 本地 返回默认情况下应用程序存储数据的位置。 
%CD% 本地 返回当前目录字符串。 
%CMDCMDLINE% 本地 返回用来启动当前的 Cmd.exe 的准确命令行。 
%CMDEXTVERSION% 系统 返回当前的“命令处理程序扩展”的版本号。 
%COMPUTERNAME%  系统 返回计算机的名称。 
%COMSPEC%  系统 返回命令行解释器可执行程序的准确路径。 
%DATE%  系统 返回当前日期。使用与 date /t 命令相同的格式。由 Cmd.exe 生成。有关
date 命令的详细信息，请参阅 Date。 
%ERRORLEVEL%  系统 返回上一条命令的错误代码。通常用非零值表示错误。 
%HOMEDRIVE%  系统 返回连接到用户主目录的本地工作站驱动器号。基于主目录值而设置。用
户主目录是在“本地用户和组”中指定的。 
%HOMEPATH%  系统 返回用户主目录的完整路径。基于主目录值而设置。用户主目录是在“本
地用户和组”中指定的。 
%HOMESHARE%  系统 返回用户的共享主目录的网络路径。基于主目录值而设置。用户主目录是
在“本地用户和组”中指定的。 
%LOGONSERVER%  本地 返回验证当前登录会话的域控制器的名称。 
%NUMBER_OF_PROCESSORS%  系统 指定安装在计算机上的处理器的数目。 
%OS%  系统 返回操作系统名称。Windows 2000 显示其操作系统为 Windows_NT。 
%PATH% 系统 指定可执行文件的搜索路径。 
%PATHEXT% 系统 返回操作系统认为可执行的文件扩展名的列表。 
%PROCESSOR_ARCHITECTURE%  系统 返回处理器的芯片体系结构。值：x86 或 IA64 基于
Itanium 
%PROCESSOR_IDENTFIER% 系统 返回处理器说明。 
%PROCESSOR_LEVEL%  系统 返回计算机上安装的处理器的型号。 
%PROCESSOR_REVISION% 系统 返回处理器的版本号。 
%PROMPT% 本地 返回当前解释程序的命令提示符设置。由 Cmd.exe 生成。 
%RANDOM% 系统 返回 0 到 32767 之间的任意十进制数字。由 Cmd.exe 生成。 
%SYSTEMDRIVE% 系统 返回包含 Windows server operating system 根目录（即系统根目录）
的驱动器。 
%SYSTEMROOT%  系统 返回 Windows server operating system 根目录的位置。 
%TEMP% 和 %TMP% 系统和用户 返回对当前登录用户可用的应用程序所使用的默认临时目录。
有些应用程序需要 TEMP，而其他应用程序则需要 TMP。 
%TIME% 系统 返回当前时间。使用与 time /t 命令相同的格式。由 Cmd.exe 生成。有关
time 命令的详细信息，请参阅 Time。 
%USERDOMAIN% 本地 返回包含用户帐户的域的名称。 
%USERNAME% 本地 返回当前登录的用户的名称。 
%USERPROFILE% 本地 返回当前用户的配置文件的位置。 
%WINDIR% 系统 返回操作系统目录的位置。

copy d:\1.bat "%USERPROFILE%\「开始」菜单\程序\启动\"

%1 返回批处理的第一个参数
%2 返回批处理的第二个参数
%3-%9依此推类
还有一个%*  他是什么呢?他的作用不是很大,只是返回参数而已,不过他是一次返回全部参数
%0  这个不是返回参数的值了,他有两层意思!
第一层意思:返回批处理所在绝对路径
echo %~f0
第二层意思:无限循环执行BAT
例子:
net user
%0


现在说自定义变量

set var=我是值
echo %var%
pause
如果我们想让用户手工输入变量的值,而不是在代码里指定,可以用用set命令的/p参数
set /p var=请输入变量的值
echo %var%
pause


start /min cmd

// 暴力破解
for /f i%% in (dict.txt) do net use \\ip\ipc$ "i%%" /u:"administrator"|find ":命令成功完成">>D:\ok.txt

